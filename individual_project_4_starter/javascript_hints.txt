
Consider working on this assignment in phases:

Phase 0: Understand what's working now
Phase 1: Get basic calculator working for all operations (save for backspace)
Phase 2: Work on showing the human-friendly alternative symbols on the screen and receipt
Phase 3: Get "Backspace" (the hardest feature) to work even with alternative symbols

Further hints for each phase below

Phase 0:
   - REMEMBER: Bring up your Browser's JavaScript Console!
   - Right now, 3 buttons (mostly) work: 2, *, and Enter.
   - Examine utils.js. Note that "execute()" and all variables are defined in utils.js
   - Hint: You will NOT need to change execute(), but it's okay to do so!
   - Note that the * displays the wrong character (only worry about fixing this in phase 2)
   - Note you will likely want to refactor  (rewrite) the "pressTwo" to instead use
     typeSymbol, like typeSymbol(2).

Phase 1  HINTS
   - Update every button to type its corresponding symbol
   - For CLR, empty the expression
   - Hint: Use textContent or innerHTML
   - Hint: Use innerHTML = '&nbsp;' to force a "space" after you clear
    console.log('A button got pressed...', symbol); // help you get started!
    expression = expression + symbol; // Combine expression with symbol...
    updateDisplay();

Phase 2  HINTS
   - Hint: Keep "expression" separate from "displayedExpression"
   - Hint: Try maintaing two variables, one shown in the display
           box (displayedExpression), keeping "expression" just 
           for execute()
   - Hint: Use typeSpecialSymbol to specify both the human label and real JS symbol


Phase 3  HINTS
Phase 3 is the hardest for one reason:
You will need to check what the last character is in order to
delete "extra" characters. Otherwise, you will mangle the more
complex operators. For example, 41% is actually 41*0.01, so if 
you press the backspace / delete button, it should delete
"*0.01", NOT just the 1, leaving only "41".

- Hint 1: You can use _getLastCharacter and _removeLastCharacter for this
- Hint 2: If it's helpful, here is a tiny bit of the solution code that
          checks for it. See how for **2 it must remove 3, and for
          *0.0001 it must remove 7?
          
          
		    if (lastChar === '²') {
			length = 3; // **2 
		    } else if (lastChar === '‰') {
			length = 7; // *0.0001  
		    }

